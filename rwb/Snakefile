# Felipe Giuste
# 5/17/2019
# Snakefile
# Randomise Whole Brain Nifti Analysis

import glob, os

#-------------------------------------------------------------------------------
# Constants
#-------------------------------------------------------------------------------
nifti_directory= "/mnt/gv0/FoxNiftis/"
temp_directory='/tmp_rwb/' # Output for randomise within Docker mapped onto Node filesystem
randomise_directory= "/mnt/gv0/randomise/" #"/HCP_Data/FG/fox_fullRes/randomise/" 
model_directory = "/mnt/gv0/model/"
design_matrix = "group_comparison.mat"
contrast_matrix = "group_comparison.con"
npermutations = "5000"
ncontrasts="6"

#-------------------------------------------------------------------------------
# Config
#-------------------------------------------------------------------------------
# SAMPLES: Folder name containing niftis for a row (128 Sources):
SAMPLES = [fname.split('/')[-1].split('.nii')[0] for fname in glob.glob('%s/*'%nifti_directory)]
RANDOMISE = expand(randomise_directory+"{sample}_done", sample = SAMPLES)

FINISHEDRANDOMISE = [fname.split('/')[-1] for fname in glob.glob('%s/*'%randomise_directory)]
FINISHEDTEMP = [fname.split('/')[-1] for fname in glob.glob('%s/*'%temp_directory)]
DELETERANDOMISE = [randomise_directory+fname+"_deleted" for fname in FINISHEDRANDOMISE]
DELETETEMP = [temp_directory+fname+"_deleted" for fname in FINISHEDTEMP]


#-------------------------------------------------------------------------------
# Rules
#-------------------------------------------------------------------------------
rule all:
    input: RANDOMISE[0:32]
    shell:
        """
        echo "Finito";
        """


# Execute Randomise on each nifti within a RowSlice folder: Starts Container=neuroimaging_{wildcards.sample}
# sample: rowSlice
# nii: chunk
rule randomise:
    input: niftidir= nifti_directory+"{sample}"
    output: randomise_directory+"{sample}_done"
    shell:
        """
        # Create randomise_directory/sample:
        mkdir -m777 -p {randomise_directory}/{wildcards.sample}

        # Docker Container:
        docker run -t -d --rm -v {temp_directory}:{temp_directory}:rw -v {input[niftidir]}:/data:rw -v {model_directory}:/code:rw --name neuroimaging_{wildcards.sample} fgiuste/neuroimaging;
        
        chunklist=`ls {input[niftidir]} | sed s/.nii.gz//`
        for nii in $chunklist
        do
            # Create Chunk directory:
            mkdir -m777 -p {temp_directory}/{wildcards.sample}/$nii;

            # Randomise on Chunk within Container:
            run_randomise="randomise -i /data/$nii.nii.gz -o {temp_directory}/{wildcards.sample}/$nii/$nii -d /code/{design_matrix} -t /code/{contrast_matrix} -n {npermutations} -R -N -x --permout";
            docker exec neuroimaging_{wildcards.sample} /bin/bash -c ". /home/startup.sh && $run_randomise"

            # Permutation processing:
            docker exec neuroimaging_{wildcards.sample} python /code/processPermutations.py {temp_directory} {ncontrasts}
        done

        # Shut down Container:
        docker stop neuroimaging_{wildcards.sample}

        # Copy final output to randomise_directory/sample_done:
        mv {temp_directory}/{wildcards.sample} {output}
        """


# DELETE RANDOMISE OUTPUT:
rule deleterandomise:
    input: DELETERANDOMISE
    shell:
        """
        rm {randomise_directory}/*_deleted
        echo "*Fin*";
        """

# DELETE RANDOMISE OUTPUT:
rule deletedeletedelete:
    input: rowslice= randomise_directory+"{sample}"
    output: randomise_directory+"{sample}_deleted"
    shell:
        """
        rm -r {input[rowslice]};
        touch {output}
        """


# TODO: create slurm job config file to specify ntasks=1,c=1, manually override for larger jobs

# RUN:
# snakemake --jobs 500 --cluster "sbatch -p SMIs -J 'rwbSMIs' --ntasks=1 --cpus-per-task=1 --mem=500M"



# Example:
# docker run -t -d --rm -v /mnt/gv0/FoxNiftis/512-639:/data:rw -v /HCP_Data/FG/fox_fullRes/randomise//512-639:/output:rw -v /mnt/gv0/model/:/code:rw --name neuroimaging_512-639 fgiuste/neuroimaging bash; 
# docker exec neuroimaging_512-639 /bin/bash -c ". /home/startup.sh && randomise -i /data/512-639_100096-100223.nii.gz -o /output/512-639_100096-100223/512-639_100096-100223 -d /code/group_comparison.mat -t /code/group_comparison.con -n 5000 -R -N -x --permout"; 

#docker exec neuroimaging_{wildcards.sample} /bin/bash -c ". /home/startup.sh && $run_randomise"
